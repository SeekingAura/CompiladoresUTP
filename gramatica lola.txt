ID : letra letraRecursivo
	|	letra letraRecursivo "'"
	;
	
letraRecursivo : letraRecursivo
	|	letra
	|	digito
	;

entero : digito digitoRecursivo
	|
	;
	
digitoRecursivo : digitoRecursivo
	|	digito
	;

valorLogico : " '0"
	|	" '1"
	;
	
tipoSimple : tipoBasico
	|	ID conjuntoExpresiones
	;

tipoBasico : 'BIT'
		| 'TS'
		| 'OC'
		;
		
conjuntoExpresiones :
	|	'(' listaExpresiones ')'
	;
	
		
listaExpresiones : expresion expresionComa
		;
		
expresionComa :  expresionComa
	|	',' expresion
	;
	
tipo : expresionCorchete tipoSimple
	;
	
expresionCorchete : expresionCorchete
	|	'[' expresion ']'
	;

declaracionConstante : ID ':=' expresion ';'
	;
	
declaracionVariable : listaId ':' tipo ';'
	;
	
listaId : ID IDComa
	;
	
IDComa : IDComa
	|	',' ID
	
selector : selector
	|	IDComa
	|	enteroPunto
	|	expresionCorchete
	;
	
enteroPunto : enteroPunto
	|	'.' entero
	;
	
factor : ID selector
	|	valorLogico
	|	entero
	|	'~' factor
	|	'?' factor
	|	'(' expresion ')'
	|	'MUX' '(' expresion ':' expresion ',' expresion ')'
	|	'MUX' '(' expresion ',' expresion ':' expresion ',' expresion ',' expresion ',' expresion)
	|	'REG' '(' expresionComa2 expresion ')'
	|	'LATCH" '(' expresion ',' expresion ')'
	|	'SR' '(' expresion ',' expresion ')'
	;

expresionComa2 : 
	|	expresion ','
	;
	
termino : factor terminoOperadores
	;
	
terminoOperadores : terminoOperadores
	|	simbolosProd factor
	|	simbolosProd factor
	|	simbolosProd factor
	|	simbolosProd factor
	;
	
simbolosProd : '*'
	|	'/'
	|	'DIV'
	|	'MOD'
	;
	
expresion : termino terminoMasMenos
	;
	
terminoMasMenos : terminoMasMenos
	|	simbolosMasMenos termino
	;
	
simbolosMasMenos : '+'
	|	'-'
	;
	
asignacion : ID selector ':=' condicionOr expresion
	;
	
condicionOr : 
	|	condicion '|'
	;
	
condicion : expresion
	;
	
relacion : expresion simbolosRelacion expresion
	;
	
simbolosRelacion : '='
	|	'#'
	|	'<'
	|	'<='
	|	'>'
	|	'=>'
	;
	
sentenciaSi : 'IF' relacion 'THEN' sentenciaSecuencia sentenciaSiSino sentenciaSiEntonces 'END'
	;

sentenciaSiSino : sentenciaSiSino
	|	'ELSIF' relacion 'THEN' sentenciaEstado
	;
	
sentenciaSiEntonces : 
	|	'ELSE' sentenciaEstado
	;
	
sentenciaPara : 'FOR' ID ':=' expresion '..' expresion 'DO' sentenciaSecuencia 'END'
	;
	
sentencia : 
	|	asignacion
	|	asignacionUnidad
	|	sentenciaSi
	|	sentenciaPara
	;
	
sentenciaSecuencia : sentencia sentenciaPuntoComa
	;
	
sentenciaPuntoComa | sentenciaPuntoComa
	|	';' sentencia
	;
	
modulo : 'MODULE' ID ';' 
declaracionTipoPuntoComa 
declaracionConstanteCONST 
declaracionVariableIN 
declaracionVariableINOUT 
declaracionVariableOUT 
declaracionVariableVAR 
sentenciaSecuenciaBEGIN 
END ID '.'
	;
	
declaracionTipoPuntoComa : declaracionTipoPuntoComa
	|	declaracionTipoPuntoComa ';'
	;
	
declaracionConstanteCONST : 
	|	'CONST' declaracionDeConstanteRecursivo
	;

declaracionDeConstanteRecursivo : declaracionDeConstanteRecursivo
	|	declaracionConstante
	;
	
declaracionVariableIN : 
	|	'IN' declaracionVariableRecursivo
	;

declaracionVariableINOUT : 
	|	'INOUT' declaracionVariableRecursivo
	;
	
declaracionVariableOUT : 
	|	'OUT' declaracionVariableRecursivo
	;
	
declaracionVariableVAR : 
	|	'VAR' declaracionVariableRecursivo
	;
	
sentenciaSecuenciaBEGIN : 
	|	'BEGIN' sentenciaSecuencia
	;
	
declaracionVariableRecursivo : declaracionVariableRecursivo
	|	declaracionVariable
	;
	
tipoFormal : expresionCorchete2 'BIT'
	;
	
expresionCorchete2 : expresionCorchete2
	|	'[' expresionOpcional ']'
	;
	
expresionOpcional : 
	|	expresion
	;
	
tipoFormalBus : 'TYPE' ID simboloPor listaIdParentesis ';'
declaracionTipoPuntoComa 
declaracionConstanteCONST 
declaracionVariableIN 
declaracionVariableINOUT 
declaracionVariableOUT 
declaracionVariableVAR 
sentenciaSecuenciaBEGIN 
END ID '.'
	;
	
simboloPor : 
	|	'*'
	;

listaIdParentesis :
	|	'(' listaId ')'
	;