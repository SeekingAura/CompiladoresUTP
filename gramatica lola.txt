ID : letra letraDigito
	|	letra letraDigito "'"
	;
	
letraDigito : letraDigitoR
	|	empty
	;

letraDigitoR : letraDigitoR letra
	|	letraDigitoR digito
	|	letra
	|	digito
	;
	
INTEGER : INTEGER digito
	|	digito
	;

LOGICVALUE : "'0"
	|	"'1"
	;

#-- Aqui empieza la gramatica para sintactico --#
	
lola : lola modulo
	|	modulo
	;
	
tipoSimple : tipoBasico
	|	ID "(" listaExpresiones ")"
	|	ID
	;

tipoBasico : "BIT"
	| "TS"
	| "OC"
	;
		
listaExpresiones : listaExpresiones "," expresion
	| expresion
	;

tipo : "[" expresion "]" tipo
	|	tipoSimple
	;

declaracionConstante : ID DOSPUNTOSIGUAL expresion ";"'
	;
	
declaracionVariable : listaId ":" tipo ";"
	;

listaId : listaId "," ID
		|	ID
		;
	
selector : selectorR
	|	empty
	;
	
selectoR : selectorR selectorRR
	|	selectorRR
	;
	
selectorRR : "." ID
	|	"." INTEGER
	|	"[" expresion "]"
	;

	
factor : ID selector
	|	valorLogico
	|	INTEGER
	|	"~" factor
	|	"â†‘" factor
	|	"(" expresion ")"
	|	"MUX" "(" expresion ":" expresion "," expresion ")"
	|	"MUX" "(" expresion "," expresion ":" expresion "," expresion "," expresion "," expresion)
	|	"REG" "(" expresion ")"
	|	"REG" "(" expresion "," expresion ")"
	|	"LATCH" "(" expresion "," expresion ")"
	|	"SR" "(" expresion "," expresion ")"
	;

termino : termino simbolosProd factor
	|	factor
	;
	
simbolosProd : "*"
	|	"/"
	|	"DIV"
	|	"MOD"
	;
	
expresion : expresion simbolosMasMenos termino
	|	termino
	;
	
expresion : expresion "+" termino
	|	expresion "-" termino
	|	termino
	;
	
asignacion : ID selector DOSPUNTOSIGUAL expresion
	|	ID selector DOSPUNTOSIGUAL condicion "|" expresion
	;
	
condicion : expresion
	;
	
relacion : expresion "=" expresion
	|	expresion "#" expresion
	|	expresion "<" expresion
	|	expresion MENORIGUAL expresion
	|	expresion ">" expresion
	|	expresion MAYORIGUAL expresion
	;
	
sentenciaSi : "IF" relacion "THEN" sentenciaSecuencia sentenciaSiSino sentenciaSiEntonces "END"
	;

sentenciaSiSino : sentenciaSiSinoR
	|	empty
	;
	
sentenciaSiSinoR : sentenciaSiSinoR "ELSIF" relacion "THEN" sentenciaSecuencia
	|	"ELSIF" relacion "THEN" sentenciaSecuencia
	;

sentenciaSiEntonces : "ELSE" sentenciaSecuencia
	|	empty
	;
	
sentenciaPara : "FOR" ID DOSPUNTOSIGUAL expresion DOBLEPUNTO expresion "DO" sentenciaSecuencia "END"
	;
	
sentencia : asignacion
	|	asignacionUnidad
	|	sentenciaSi
	|	sentenciaPara
	|	empty
	;
	
sentenciaSecuencia : sentenciaSecuencia ";" sentencia
	|	sentencia
	;
	
modulo : "MODULE" ID ";" 
declaracionTipoPuntoComa
declaracionConstanteCONST
declaracionVariableIN
declaracionVariableINOUT 
declaracionVariableOUT 
declaracionVariableVAR 
sentenciaSecuenciaBEGIN 
END ID "."
	;
	
declaracionTipoPuntoComa : declaracionTipoPuntoComaR
	|	empty
	;
	
declaracionTipoPuntoComaR : declaracionTipoPuntoComaR declaracionTipo ";"
	|	declaracionTipo ";"
	;
	
declaracionConstanteCONST : "CONST" declaracionConstanteRecursivo
	|	empty
	;

declaracionConstanteRecursivo : declaracionConstanteRecursivoR
	|	empty
	;

declaracionConstanteRecursivoR : declaracionConstanteRecursivoR declaracionConstante
	|	declaracionConstante
	;
	
declaracionVariableIN : "IN" declaracionVariableRecursivo
	|	empty
	;

declaracionVariableRecursivo : declaracionVariableRecursivoR
	|	empty
	;
	
declaracionVariableRecursivoR : declaracionVariableRecursivoR declaracionVariable
	|	declaracionVariable
	;
	
declaracionVariableINOUT : "INOUT" declaracionVariableRecursivo
	|	empty
	;
	
declaracionVariableOUT : "OUT" declaracionVariableRecursivo
	|	empty
	;
	
declaracionVariableVAR : "VAR" declaracionVariableRecursivo
	|	empty
	;
	
sentenciaSecuenciaBEGIN : "BEGIN" sentenciaSecuencia
	|	empty
	;
	
tipoFormal : expresionCorcheteO "BIT"
	;
	
expresionCorcheteO : expresionCorcheteOR
	|	empty
	;
	
expresionCorcheteOR : expresionCorcheteOR "[" expresionOpcional "]"
	|	"[" expresionOpcional "]"
	;
	
expresionOpcional : expresion
	|	empty
	;
	
tipoFormalBus : expresionCorcheteO "TS"
	|	expresionCorcheteO "OC"
	;
	
declaracionTipo : "TYPE" ID simboloPor listaIdParentesis ";" 
declaracionConstanteCONST 
tipoFormalIN
tipoFormlINOUT
declaracionVariableOUT 
declaracionVariableVAR 
sentenciaSecuenciaBEGIN 
END ID
	;
	
simboloPor : "*"
	|	empty
	;

listaIdParentesis : "(" listaId ")"
	|	empty
	;
	
tipoFormalIN : IN tipoFormallistaId
	|	empty
	;

tipoFormallistaId : tipoFormallistaIdR 
	|	empty
	;
	
tipoFormallistaIdR : tipoFormallistaIdR listaId ":" tipoFormal ";"
	|	listaId ":" tipoFormal ";"
	;
	
tipoFormnalINOUT : INOUT tipoFormlBuslistaId
	|	empty
	;
	
tipoFormlBuslistaId : tipoFormlBuslistaIdR
	|	empty
	;

tipoFormlBuslistaIdR : tipoFormlBuslistaIdR listaId ":" tipoFormalBus ";"
	|	listaId ":" tipoFormalBus ";"
	;
	
asignacionUnidad : ID selector "(" listaExpresiones ")"

empty :