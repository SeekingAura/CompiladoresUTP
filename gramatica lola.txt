ID : letra letraR
	;
	
letraR : letraR letraDigito
	|	letraDigito
	|
	;

letraDigito : letra comillaOp
	|	digito comillaOp
	;
	
comillaOp : "'"
	|
	;
	
INTEGER : digito digitoR
	;
	
digitoR : digitoRR
	|
	;
	
digitoRR : digitoRR digito
	|	digito
	;

LOGICVALUE : "'0"
	|	"'1"
	;

#-- Aqui empieza la gramatica para sintactico --#
	
tipoSimple : tipoBasico
	|	ID conjuntoExpresiones
	;
	

tipoBasico : "BIT"
		| "TS"
		| "OC"
		;
		
conjuntoExpresiones : "(" listaExpresiones ")"
	|	
	;
		
listaExpresiones : expresion expresionComa
		;
listaExpresiones(expresion, expresionComa)
		
expresionComa :  expresionComaR 
	|
	;
expresionComa(expresionComaR)
	
expresionComaR : expresionComaR "," expresion
	|	"," expresion
	;
expresionComaR(expresiones)

tipo : expresionCorchete tipoSimple
	;
tipo(expresionCorchete, tipoSimple)
	
expresionCorchete : expresionCorcheteR
	|
	;
expresionCorchete(expresionCorcheteR)
	
expresionCorcheteR : expresionCorcheteR "[" expresion "]"
	|	"[" expresion "]"
	;
expresionCorcheteR(expresion)

declaracionConstante : ID ":=" expresion ";"
	;
	
declaracionVariable : listaId ":" tipo ";"
	;

listaId : ID IDComa
	;
	
IDComa : IDComaR
	|
	;
	
IDComaR : IDComaR "," ID
	|	"," ID
	;
	
selector : selectorR
	|
	;
	
selectoR : selectorR selectorRR
	|	selectorRR
	;
	
selectorRR : "." ID
	|	"." INTEGER
	|	"[" expresion "]"
	;

	
factor : ID selector
	|	valorLogico
	|	INTEGER
	|	"~" factor
	|	"â†‘" factor
	|	"(" expresion ")"
	|	"MUX" "(" expresion ":" expresion "," expresion ")"
	|	"MUX" "(" expresion "," expresion ":" expresion "," expresion "," expresion "," expresion)
	|	"REG" "(" expresionComaO expresion ")"
	|	"LATCH" "(" expresion "," expresion ")"
	|	"SR" "(" expresion "," expresion ")"
	;

expresionComaO : expresion ","
	|	
	;
	
termino : factor terminoOperadores
	;
	
terminoOperadores : terminoOperadoresR 
	|
	;
	
terminoOperadoresR : terminoOperadoresR simbolosProd factor
	|	simbolosProd factor
	;
	
simbolosProd : "*"
	|	"/"
	|	"DIV"
	|	"MOD"
	;
	
expresion : termino terminoMasMenos
	;
	
terminoMasMenos : terminoMasMenosR
	|
	;

terminoMasMenosR : terminoMasMenosR simbolosMasMenos termino
	|	simbolosMasMenos termino
	;
	
simbolosMasMenos : "+"
	|	"-"
	;
	
asignacion : ID selector ":=" expresion
	|	ID selector ":=" condicion "|" expresion
	;
	
condicion : expresion
	;
	
relacion : expresion simbolosRelacion expresion
	;
	
simbolosRelacion : "="
	|	"#"
	|	"<"
	|	"<="
	|	">"
	|	">="
	;
	
sentenciaSi : "IF" relacion "THEN" sentenciaSecuencia sentenciaSiSino sentenciaSiEntonces "END"
	;

sentenciaSiSino : sentenciaSiSinoR
	|
	;
	
sentenciaSiSinoR : sentenciaSiSinoR "ELSIF" relacion "THEN" sentenciaSecuencia
	|	"ELSIF" relacion "THEN" sentenciaSecuencia
	;

sentenciaSiEntonces : "ELSE" sentenciaSecuencia
	|	
	;
	
sentenciaPara : "FOR" ID ":=" expresion ".." expresion "DO" sentenciaSecuencia "END"
	;
	
sentencia : asignacion
	|	asignacionUnidad
	|	sentenciaSi
	|	sentenciaPara
	|
	;
	
sentenciaSecuencia : sentencia sentenciaPuntoComa
	;
	
sentenciaPuntoComa : sentenciaPuntoComaR
	|
	;
	
sentenciaPuntoComaR : sentenciaPuntoComaR ";" sentencia
	|	";" sentencia
	;
	
modulo : "MODULE" ID ";" 
declaracionTipoPuntoComa
declaracionConstanteCONST
declaracionVariableIN
declaracionVariableINOUT 
declaracionVariableOUT 
declaracionVariableVAR 
sentenciaSecuenciaBEGIN 
END ID "."
	;
	
declaracionTipoPuntoComa : declaracionTipoPuntoComaR
	|
	;
	
declaracionTipoPuntoComaR : declaracionTipoPuntoComaR declaracionTipo ";"
	|	declaracionTipo ";"
	;
	
declaracionConstanteCONST : "CONST" declaracionConstanteRecursivo
	|	
	;

declaracionConstanteRecursivo : declaracionConstanteRecursivoR
	|
	;

declaracionConstanteRecursivoR : declaracionConstanteRecursivoR declaracionConstante
	|	declaracionConstante
	;
	
declaracionVariableIN : "IN" declaracionVariableRecursivo
	|	
	;

declaracionVariableINOUT : "INOUT" declaracionVariableRecursivo
	|	
	;
	
declaracionVariableOUT : "OUT" declaracionVariableRecursivo
	|	
	;
	
declaracionVariableVAR : "VAR" declaracionVariableRecursivo
	|	
	;
	
sentenciaSecuenciaBEGIN : "BEGIN" sentenciaSecuencia
	|	
	;
	
declaracionVariableRecursivo : declaracionVariableRecursivoR
	|
	;
	
declaracionVariableRecursivoR : declaracionVariableRecursivoR declaracionVariable
	|	declaracionVariable
	;
	
tipoFormal : expresionCorcheteO "BIT"
	;
	
expresionCorcheteO : expresionCorcheteOR
	|
	;
	
expresionCorcheteOR : expresionCorcheteOR "[" expresionOpcional "]"
	|	"[" expresionOpcional "]"
	;
	
expresionOpcional : expresion
	|	
	;
	
tipoFormalBus : expresionCorcheteO "TS"
	|	expresionCorcheteO "OC"
	;
	
declaracionTipo : "TYPE" ID simboloPor listaIdParentesis ";" 
declaracionConstanteCONST 
tipoFormalIN
tipoFormlINOUT
declaracionVariableOUT 
declaracionVariableVAR 
sentenciaSecuenciaBEGIN 
END ID
	;
	
simboloPor : "*"
	|	
	;

listaIdParentesis : "(" listaId ")"
	|	
	;
	
tipoFormalIN : IN tipoFormallistaId
	|	
	;

tipoFormallistaId : tipoFormallistaIdR 
	|
	;
	
tipoFormallistaIdR : tipoFormallistaIdR listaId ":" tipoFormal ";"
	|	listaId ":" tipoFormal ";"
	;
	
tipoFormnalINOUT : INOUT tipoFormlBuslistaId
	|
	;
	
tipoFormlBuslistaId : tipoFormlBuslistaIdR
	|
	;

tipoFormlBuslistaIdR : tipoFormlBuslistaIdR listaId ":" tipoFormalBus ";"
	|	listaId ":" tipoFormalBus ";"
	;
	
asignacionUnidad : ID selector "(" listaExpresiones ")"